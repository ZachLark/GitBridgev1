{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs20 \cf0 # ============================================\
# \uc0\u55357 \u56960  GitBridge Core App \'96 gitapp.py (v1.0)\
# ============================================\
\
from flask import Flask, request, jsonify, render_template\
from flasgger import Swagger\
from functools import wraps\
import os\
import json\
import base64\
import requests\
from datetime import datetime\
\
# ========== \uc0\u55357 \u56615  CONFIGURATION ==========\
GITHUB_API_URL = "https://api.github.com"\
REPO_OWNER = "ZachLark"\
REPO_NAME = "erudite-ecb-api"\
DEFAULT_BRANCH = "main"\
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")\
\
API_SECRET_KEY = "mysecret123"  # Replace in production\
LOG_FILE = "activity_log.jsonl"\
\
GITHUB_HEADERS = \{\
    "Authorization": f"Bearer \{GITHUB_TOKEN\}",\
    "Accept": "application/vnd.github+json"\
\}\
\
# ========== \uc0\u55357 \u57057 \u65039  API SECURITY DECORATOR ==========\
def require_api_key(f):\
    @wraps(f)\
    def decorated_function(*args, **kwargs):\
        key = request.headers.get("X-API-KEY", "").strip()\
        if key and key == API_SECRET_KEY:\
            return f(*args, **kwargs)\
        else:\
            return jsonify(\{"error": "Invalid or missing API key"\}), 401\
    return decorated_function\
\
# ========== \uc0\u55358 \u56830  LOGGING UTIL ==========\
def log_action(action, data):\
    entry = \{\
        "timestamp": datetime.utcnow().isoformat(),\
        "action": action,\
        **data\
    \}\
    with open(LOG_FILE, "a") as f:\
        f.write(json.dumps(entry) + "\\n")\
\
# ========== \uc0\u55357 \u56960  FLASK SETUP ==========\
app = Flask(__name__)\
\
swagger_template = \{\
    "swagger": "2.0",\
    "info": \{"title": "GitBridge API", "version": "1.0"\},\
    "securityDefinitions": \{\
        "APIKeyHeader": \{\
            "type": "apiKey",\
            "name": "X-API-KEY",\
            "in": "header",\
            "description": "Enter your API key"\
        \}\
    \},\
    "security": [\{"APIKeyHeader": []\}]\
\}\
\
swagger = Swagger(app, template=swagger_template)\
\
# ========== \uc0\u55357 \u56513  CREATE FILE ROUTE ==========\
@app.route('/create', methods=['POST'])\
@require_api_key\
def create_file():\
    body = request.get_json()\
    filename = body.get("filename")\
    content = base64.b64encode(body.get("content", "").encode()).decode()\
    commit_msg = body.get("commit_msg") or "Create file via GitBridge"\
\
    url = f"\{GITHUB_API_URL\}/repos/\{REPO_OWNER\}/\{REPO_NAME\}/contents/\{filename\}"\
    payload = \{\
        "message": commit_msg,\
        "content": content,\
        "branch": DEFAULT_BRANCH\
    \}\
    r = requests.put(url, headers=GITHUB_HEADERS, json=payload)\
\
    log_action("create_file", \{\
        "filename": filename,\
        "status": r.status_code,\
        "response": r.json()\
    \})\
\
    return jsonify(r.json()), r.status_code\
\
# ========== \uc0\u55357 \u56580  RENAME FILE ROUTE ==========\
@app.route('/rename', methods=['POST'])\
@require_api_key\
def rename_file():\
    body = request.get_json()\
    original = body.get("original_filename")\
    newname = body.get("new_filename")\
    sha = body.get("sha")\
    commit_msg = body.get("commit_msg") or "Rename file"\
\
    # Step 1: Create new file with same content\
    get_url = f"\{GITHUB_API_URL\}/repos/\{REPO_OWNER\}/\{REPO_NAME\}/contents/\{original\}"\
    get_resp = requests.get(get_url, headers=GITHUB_HEADERS)\
    if get_resp.status_code != 200:\
        return jsonify(\{"error": "Original file not found"\}), 404\
\
    content = get_resp.json().get("content")\
\
    put_url = f"\{GITHUB_API_URL\}/repos/\{REPO_OWNER\}/\{REPO_NAME\}/contents/\{newname\}"\
    put_payload = \{\
        "message": commit_msg,\
        "content": content,\
        "branch": DEFAULT_BRANCH\
    \}\
    put_resp = requests.put(put_url, headers=GITHUB_HEADERS, json=put_payload)\
\
    # Step 2: Delete old file\
    delete_payload = \{\
        "message": f"Delete \{original\} after rename",\
        "sha": sha,\
        "branch": DEFAULT_BRANCH\
    \}\
    delete_url = f"\{GITHUB_API_URL\}/repos/\{REPO_OWNER\}/\{REPO_NAME\}/contents/\{original\}"\
    delete_resp = requests.delete(delete_url, headers=GITHUB_HEADERS, json=delete_payload)\
\
    log_action("rename_file", \{\
        "old_filename": original,\
        "new_filename": newname,\
        "sha": sha,\
        "status": \{\
            "create": put_resp.status_code,\
            "delete": delete_resp.status_code\
        \}\
    \})\
\
    return jsonify(\{\
        "create_status": put_resp.status_code,\
        "delete_status": delete_resp.status_code\
    \}), 200\
\
# ========== \uc0\u55357 \u56550  FILE METADATA ROUTE ==========\
@app.route('/file-metadata', methods=['GET'])\
@require_api_key\
def file_metadata():\
    filepath = request.args.get("filename")\
    url = f"\{GITHUB_API_URL\}/repos/\{REPO_OWNER\}/\{REPO_NAME\}/contents/\{filepath\}"\
    r = requests.get(url, headers=GITHUB_HEADERS)\
    return jsonify(r.json()), r.status_code\
\
# ========== \uc0\u55357 \u56538  DIRECTORY LISTING ROUTE ==========\
@app.route('/docs', methods=['GET'])\
@require_api_key\
def list_docs():\
    url = f"\{GITHUB_API_URL\}/repos/\{REPO_OWNER\}/\{REPO_NAME\}/contents/docs"\
    r = requests.get(url, headers=GITHUB_HEADERS)\
    return jsonify(r.json()), r.status_code\
\
# ========== RUN ==========\
if __name__ == '__main__':\
    app.run(port=10001, debug=True)\
}